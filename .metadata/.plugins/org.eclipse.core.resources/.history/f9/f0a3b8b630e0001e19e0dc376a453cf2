Thymeleaf

1) 기본사용법
<html>에 xmln:th 속성읠 부여
	<html xmlns:th="http://www.thymleaf.org">
	
2) 데이터 출력
	표현식 : ${식별자}, @{url}, *{member_variable}
	
	특정 html 요소에 문자열(숫자포함) 출력용 속성 : 
	th:text - innerText , [[${...}]]
	th:utext - innerHTML (하위 요소용 태그를 처리) , [(${...})]
		<p th:text="${'제목 : ' '+data'}"></p>
		
	controller 에서 보내는 방식은 spring legacy와 동일하다.

Html 조합 - fragment
	다수의 html을 하나의 문서로 묶어주는 방법
	한 html을 여러 조각으로 나눠서 사용하는 방법.
	
	1) <th:fragment> - 페이지를 조각으로 나누는 속성.
		<th:block> : thyneleaf 코드의 영역을 작성하는 태그.
		
		예) frag.html
		<th:block th:fragment="header">
			<!-- 헤더용 여러 요소를 작성 -->
		</th:block>
		
		<div th:fragment="footer">
			<!-- 풋터용 여러 요소를 작성 -->
		</div>
	
	2) <th:insert> - 조각 삽입, 하위 요소로 삽입.
		<div th:insert="~{frag::header}">
		다른 문서도 삽입 가능
		<div th:insert="~{xxx.html}">
		
	3) <th:replace> - 조각 대체. 현재 소를 대체.
		<div th:replace="{frag::footer}">
		
Front-end (html) 에서 Controller로 데이터 전송
	1) Path variable 방식 (따로 제공되는 방식은 없음)
		주소칸 : /second/1/2 
	2) Query Sting 방식 (get 방식)
		주소칸 : /second?data1=1&data2=2
		thymeleaf : th:href="@{second_data1=1,data2=2)}"
		자바스크립트는 원래 방식으로 작성.
	3) Form 전송
		th:action ="@{url}"
		
Thymeleaf 제어용 태그

1) <th:block> - 제어 요소를 담기위한 태그.
		조건식. 반속식 등을 작성할 때 사용
		상위요소가 지정되지 않은 객체의 출력에 활용
		<th:block th:object="${dto}>
		
	제어 속성
	
	th:if - if문에 해당하는 속성 조건식의 값이 true일때 동작
	th:unless - if문의 else 에 해당하는 속성 조건식의 값이 false 일 때 동작
		java의 if-else 처럼 사용할 경우 같은 조건식을 사용
		
		
		
	* 문자열 유무 식별 함수
	- #strings.isEmpty(data)
	:data가 null이면 true, data 가 '' 이어도 true
	
	- th:switch, th:case - java의 switch	와 case에 해당하는 속성
		default는 없음
	th:switch+"${값 또는 수식}"
	th:case="값"
	
	- th:each - for 문에 해당하는 제어 속성. for(변수 : 리스트)
		<th:block th:each="var:${list}">
	
	* 참고) List와 Object의 null 체크 함수
	
		-List : #lists.isEmpty(list)
		-object(dto등) : #object.isNull(object)
		
Thyneleaf 연산자 처리
{ , } 내에서 연산식을 만들어 사용 할 수 있음

1) 산술 연산 : +,-,*,/,%
	th:text="${1 + 2}"
	
2) 비교 연산 : == != > >= < <=

	th:text="${ a> b}"
	
3) 논리 연산 : && || ! and or not

4) 조건 연산식 : (조건식) ? A : B
	th:text="${(a > b): 'a가 크다' : 'b가 크다'}"
	
5) 기본 표현식(Default Expression. 또는 Elvis Operator)
	th:text="${data?:'값'}"   ->  ?:
		-> data가 null(또는 "")이 아니면 data를 사용,
			null 이면 '값'을 사용
		